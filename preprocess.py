# -*- coding: utf-8 -*-
"""preprocess.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tvsNhwrH9a8vlQLfbyXyCVC8PnDXCYnS
"""

#!pip install gdal
#!pip install astropy

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import h5py
import gdal
import re
import skimage.measure
gdal.AllRegister()
#Firemask training data: our 'y'

# Latitude and Longitude retrieved  from emission data
# Input hashmap:
'''
            'LandAero', 1
            'CloudFraction', 2
            'OpticalDepth', 3
            'QAFlag', 4
            'combined', 5
            'AlgoFlag', 6
            'LST' 7
            'CloudMask' 8
in that order
'''
'''
land surface temp
aerosol_cldmax
aerosol_type land
aerosol_cloud_fraction_land
Deep_blue_aerosol_depth_550
combined
qaflag
algoflag
'''
def preprocess(firemask_data='/home/l12-o-0-554/Desktop/SpaceApps/notebooks/spaceapps-2020/MOD14.A2020031.0910.006.2020031142922.hdf',
               em_data='/home/l12-o-0-554/Desktop/SpaceApps/notebooks/spaceapps-2020/MOD04_L2.A2020031.0910.061.2020031193711.hdf',
               land_data='/home/l12-o-0-554/Desktop/SpaceApps/notebooks/spaceapps-2020/MOD11_L2.A2020031.0910.006.2020032074934.hdf'):
    '''
    firemask_data='/content/drive/My Drive/Spaceapps-2020/Abhinav/MOD14.A2020031.0910.006.2020031142922.hdf',
               em_data='/content/drive/My Drive/Spaceapps-2020/Abhinav/MOD04_L2.A2020031.0910.061.2020031193711.hdf',
               land_data='/content/drive/My Drive/Spaceapps-2020/Abhinav/MOD11_L2.A2020031.0910.006.2020032074934.hdf'
    '''
    '''
    '/home/l12-o-0-554/Desktop/SpaceApps/notebooks/spaceapps-2020/MOD14.A2020031.0910.006.2020031142922.hdf',
                       '/home/l12-o-0-554/Desktop/SpaceApps/notebooks/spaceapps-2020/MOD04_L2.A2020031.0910.061.2020031193711.hdf',
                       '/home/l12-o-0-554/Desktop/SpaceApps/notebooks/spaceapps-2020/MOD11_L2.A2020031.0910.006.2020032074934.hdf'
    '''
    firemask =  gdal.Open(firemask_data)
    for name in firemask.GetSubDatasets():
      #print(name)
      if (re.search('fire mask',name[1])):
        firemask = gdal.Open(name[0],gdal.GA_ReadOnly).ReadAsArray()
        break
    
    
    aerodata = [0,1,2,3,4,5,6,7]
    latlong = [0,1]
    nametags = [
                ['Aerosol_Type_Land',0],
                ['Aerosol_Cloud_Fraction_Land',1],
                ['Deep_Blue_Aerosol_Optical_Depth_550_Land',2],
                ['_QA_F',3],
                ['Algorithm_Flag',4],
                ['AOD_550_Dark_Target_Deep_Blue_Combined',5]
                ]
    
    #Emissions data:
    aerosol = gdal.Open(em_data)
    CloudMask = []
    for name in aerosol.GetSubDatasets():
      #print(name)
      if (re.search('Latitude',name[1])):
          latlong[0] = gdal.Open(name[0],gdal.GA_ReadOnly).ReadAsArray()
      elif (re.search('Longitude',name[1])):
          latlong[1] = gdal.Open(name[0],gdal.GA_ReadOnly).ReadAsArray()
      else:
        for tag in nametags:
          if (re.search(tag[0],name[1])):
            aerodata[tag[1]] = gdal.Open(name[0],gdal.GA_ReadOnly).ReadAsArray()
            break
          # Extra case for QAFlag since this didn't match the regex
          elif (name[1].find('_QA_Flag') != -1):
            aerodata[3] = gdal.Open(name[0],gdal.GA_ReadOnly).ReadAsArray()
            break
          # Cloudmask doesn't have good dimensions
          elif (re.search('Aerosol_Cldmask_',name[1])):
            CloudMask = gdal.Open(name[0],gdal.GA_ReadOnly).ReadAsArray()
            break
    
    #LAND TEMP DATA: 
    ns = gdal.Open(land_data)
    tempLST = []
    for name in ns.GetSubDatasets():
        if (re.search('LST',name[1])):
          tempLST = gdal.Open(name[0],gdal.GA_ReadOnly).ReadAsArray() #Merge Lstdata with Aerodata
          break
    output = skimage.measure.block_reduce(firemask, (10,10), np.max)[0:203,0:135].flatten() #use a 10x10 window to perform an np.max
    aerodata[6] = skimage.measure.block_reduce(tempLST,(10,10),np.max)[0:203,0:135]
    aerodata[7] = skimage.measure.block_reduce(CloudMask,(20,20),np.mean)[0:203,0:135]
    aerodata = np.array(aerodata)
    aerodata = np.dstack([aerodata[i] for i in range(0,8)])
    #1 2 3
    #4 5 6
    #
    # [1,4] [2,5] [3,6]
    aerodata = aerodata.reshape(aerodata.shape[0]*aerodata.shape[1],aerodata.shape[2])
    latlong = np.array(latlong)
    latlong = np.dstack((latlong[0],latlong[1]))
    latlong = latlong.reshape(latlong.shape[0]*latlong.shape[1],latlong.shape[2])
    #print(aerodata.shape, latlong.shape, output.shape)
    
    X = aerodata 
    classes = 2
    output =  np.array([ 1 if (i > 7) else 0 for i in output])
    #print(output.shape)
    #y = np.eye(classes)[output.reshape(-1)]
    y = output.reshape((output.shape[0],))
    coords = latlong
    return X,y,coords
    
X,y,coords=preprocess()
